// ignore_for_file: use_string_buffers

import 'dart:convert';
import 'dart:io';

import 'package:moinsen_supagen/src/commands/converter/utils.dart';

Future<void> generateErdFile(String inputFile, String outputDir) async {
  final input = await File(inputFile).readAsString();
  final inputJson = jsonDecode(input) as Map<String, dynamic>;
  final jsonSchema = inputJson['schemes'] as List<dynamic>;

  final directory = Directory(outputDir);
  if (!directory.existsSync()) {
    await directory.create();
  }

  final fullFileName = '$outputDir/erd-complete.mmd';
  final file = File(fullFileName);
  final sink = file.openWrite();
  sink.write('%% *** This file is generated by moinsen_supagen ***\n');
  sink.write('%% --- Dont edit!\n\n');
  sink.write('erDiagram\n');

  for (final data in jsonSchema) {
    final schema = data['name'] as String;

    final schemaOutpunt = await generateErdFileForSchema(
      schema,
      outputDir,
      inputJson,
    );

    if (schemaOutpunt != null) {
      sink.write('\n$schemaOutpunt\n\n');
    }
  }

  await sink.close();
}

Future<String?> generateErdFileForSchema(
  String schema,
  String outputDir,
  Map<String, dynamic> json,
) async {
  final jsonTables = json['tables'][schema] as List<dynamic>?;
  final jsonRelations = json['relations'][schema] as List<dynamic>?;

  if (jsonTables == null) {
    return null;
  }

  final directory = Directory(outputDir);
  if (!directory.existsSync()) {
    await directory.create();
  }

  final erdFileName = '$outputDir/erd-$schema.mmd';
  final erdFile = File(erdFileName);
  final sink = erdFile.openWrite();
  var line = '';
  var result = '';

  line = 'erDiagram\n';
  sink.write(line);
  result += line;

  for (final table in jsonTables) {
    final tableName = table['table'] as String;
    final columns = table['columns'] as List<dynamic>;
    final upperName = tableName.toUpperCase();

    line = '  $upperName {\n';
    sink.write(line);
    result += line;

    for (final field in columns) {
      final lowerCaseName = (field['name'] as String).toLowerCase();

      final keyInformations = erdKey(field['keyInformations'] as String);
      final type = erdType(field['type'] as String).toLowerCase();

      line = '    $type $lowerCaseName $keyInformations\n';
      result += line;
      sink.write(line);
    }

    line = '  }\n\n';
    sink.write(line);
    result += line;
  }

  for (final r in jsonRelations ?? []) {
    final relations = r['relations'] as String?;
    if (relations != null && relations.isNotEmpty) {
      final relationsList = relations.split(',');
      for (final relation in relationsList) {
        line = '  ${relation.trim().toUpperCase()}: ""\n';
        // Replace all XX.YY with YY in whole line
        line = line.replaceAll(RegExp(r'\w+\.'), '');
        sink.write(line);
        result += line;
      }
    }
  }

  await sink.close();

  return result.replaceAll('erDiagram', '%% --- $schema\n');
}
